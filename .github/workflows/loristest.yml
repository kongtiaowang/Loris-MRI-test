name: LORIS Test Suite

on:
  - push
  - pull_request

jobs:
  buildjs:
    env:
      EEG_VIS_ENABLED: 'true'
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3

      - name: Install EEG package dependencies
        run: |
          sudo apt install -y imagemagick-6-common libmagickcore-6.q16-6 libmagickwand-6.q16-6 \
             libprotobuf-dev libprotobuf23 libprotoc23 protobuf-compiler
          cd Loris/modules/electrophysiology_browser/jsx/react-series-data-viewer/
          protoc protocol-buffers/chunk.proto --js_out=import_style=commonjs,binary:./src/

      - name: Install npm modules
        run: npm ci

      - name: Compile LORIS javascript
        run: npm run compile

      - name: Create LORIS JS tarball
        run: tar cfvz lorisjs.tar.gz Loris/htdocs/js/components/ Loris/modules/*/js/*

      - name: Create node_modules tarball
        run: tar cfvz node_modules.tar.gz Loris/node_modules

      - uses: actions/upload-artifact@v3
        name: Upload node_modules artifact
        with:
          name: node_modules
          path: node_modules.tar.gz

      - uses: actions/upload-artifact@v3
        name: Upload lorisjs.tar.gz artifact
        with:
          name: lorisjs
          path: lorisjs.tar.gz

  buildphp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.1', '8.2', '8.3']
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: zip, php-ast

      - name: Validate composer.json and composer.lock
        run: composer validate --working-dir=Loris

      - name: Cache Composer packages
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Composer cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest --working-dir=Loris

      - name: Create vendor tarball
        run: tar cfvz vendor-php${{matrix.php}}.tar.gz Loris/vendor

      - uses: actions/upload-artifact@v3
        name: Upload vendor-php${{matrix.php}}.tar.gz artifact
        with:
          name: vendor-php${{matrix.php}}
          path: vendor-php${{matrix.php}}.tar.gz

  api:
    runs-on: ubuntu-latest
    needs:
      - buildjs
      - buildphp 

    env:
      DB_DATABASE: LorisTest
      DB_USER: SQLTestUser
      DB_PASSWORD: TestPassword
      LORIS_DB_CONFIG: Loris/project/config.xml
      DOCKER_WEB_SERVER: http://localhost:8000/
    strategy:
      fail-fast: false
      matrix:
        php: ['8.1', '8.2', '8.3']
        apiversion: ['v0.0.3', 'v0.0.4-dev']
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        name: Download node_modules artifact
        with:
          name: node_modules
          path: .

      - uses: actions/download-artifact@v3
        name: Download compiled LORIS javascript artifact
        with:
          name: lorisjs
          path: .

      - uses: actions/download-artifact@v3
        name: Download PHP dependencies artifact
        with:
          name: vendor-php${{matrix.php}}
          path: .

      - name: Extract node_modules
        run: tar xfvz node_modules.tar.gz

      - name: Extract compiled JS
        run: tar xfvz lorisjs.tar.gz

      - name: Extract composer vendor directory
        run: tar xfvz vendor-php${{matrix.php}}.tar.gz

      - name: Generate VERSION file
        run: make VERSION

      - name: Setup project/ directory
        run: |
          mkdir -p project/instruments
          cp test/config.xml project/config.xml
          cp test/test_instrument/NDB_BVL_Instrument_testtest.class.inc project/instruments/
          cp -r raisinbread/instruments/* project/instruments/
          sed -i 's/<sandbox>1<\/sandbox>/<sandbox>0<\/sandbox>/g' project/config.xml
          sed -i 's/<adminUser>SQLTestUser<\/adminUser>/<adminUser>root<\/adminUser>/g' project/config.xml
          sed -i 's/<adminPassword>TestPassword<\/adminPassword>/<adminPassword>root<\/adminPassword>/g' project/config.xml
          sed -i 's/<host>db<\/host>/<host>localhost<\/host>/g' project/config.xml
          cat project/config.xml

      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -uroot -proot
          mysql -e "CREATE USER '${{env.DB_USER}}'

